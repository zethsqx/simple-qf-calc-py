import pandas_datareader.data as pdr
import numpy as np
import quandl
import cmath as math
from datetime import datetime
from dateutil.relativedelta import relativedelta
from CustomExceptions import *
import StockAllocation

global stockGlobalMap
stockGlobalMap = {}

global stockGlobalOrder
stockGlobalOrder = []

def getGlobalMap():
    return stockGlobalMap

def getStock(stock):
    ##today = datetime.now()
    #then = today - datetime.timedelta(days=3*365)
    ##noOfYears = 3
    ##three_yrs_ago = datetime.now() - relativedelta(years=noOfYears)
    #print (today)
    #print(three_yrs_ago)
    #stock=pdr.get_data_google('AAPL',three_yrs_ago, today)

    #EXAMPLE- retrieve data for Apple
    ##df = pdr.DataReader(stock, 'yahoo', three_yrs_ago, today)

    df = getStockDF(stock)
    #    print(df)

    returnList = []

    #get a list of close values within the time period for the calculation for Sharpe ratio
    #calculate the average returns based on the current day's price and the previous day price
    for i in range(len(list(df['Close']))):
        if(i < len(list(df['Close'])) - 1):
            first = list(df['Close'])[i]
            second = list(df['Close'])[i + 1]
            averageReturn = (second - first) / first
            returnList.append(averageReturn)

    stockGlobalMap.update({stock: returnList})
    
    return returnList;

def getStockDF(stock):
    today = datetime.now()
    noOfYears = 1
    one_year_ago = datetime.now() - relativedelta(years=noOfYears)
    
    try:
        df = pdr.DataReader(stock, 'yahoo', one_year_ago, today)
    except RemoteDataError:
        raise ApplicationException('Too many API requests','')
    return df

def sharpe(returns):
    """
    Sharpe ratio = (Mean Return - Risk Free Rate)/(Risk)
    Risk is calculated using Standard Deviation. Essentially, sharpe ratio is interpreted as amount of return per unit of risk.
    The higher the sharpe ratio, the better.
    Risk free rate is based on US 1-year treasury bill.
    252 is the number of trading days in a year for annualisation
    """
    Mean_Return = (np.mean(returns))*100*252
    rf = quandl.get("FRED/TB1YR", authtoken="VV_5NSuUzyPxy8sgZkzp")
    Risk_Free = (rf['Value'][-1])
    Risk = (np.std(returns))*100*((252)**0.5)
    return (Mean_Return - Risk_Free)/(Risk)

def covMatrix(stockDict):
    
    stockList=[]
    if(len(stockDict)>=2):
        for i in stockDict.keys():
            #print(stockDict.get(i))
            stockList.append(stockDict.get(i))
            stockGlobalOrder.append(i)
        #vStackArray = np.vstack((a,b))
        #for i in range(2,len(stockList)):
            #currentStock = getStock(stockList[i])
            #vStackArray = np.vstack((vStackArray,currentStock))
    #print(stockGlobalOrder)
    return np.cov(stockList,ddof=0)

def getWeightage():
    c = StockAllocation.getPercentGlobalMap()
    result=[]
    for i in range(0,len(stockGlobalOrder)):
        result.append(c.get(stockGlobalOrder[i]))
    return result

def portfolioRisk(matrix,weightage):
    result = 0.0
    for a in range(0,len(matrix)):
        for b in range (0,a+1):
            if(b==a):
                result += weightage[b]**2*matrix[a,b]
            else:
                result += matrix[a,b]*weightage[a]*weightage[b]*2
    return math.sqrt(result)

def portfolioCorrelation(matrix,risk,weightage):
    result=risk**2
    bottom=0.0
    for a in range (0,len(matrix)):
        result -= (weightage[a]**2)*(matrix[a,a])
        for b in range (0,a):
            bottom += weightage[a]*weightage[b]*math.sqrt(matrix[a,a])*math.sqrt(matrix[b,b])*2
    result = result/bottom
    print(type(result))
    return result

#m1= covMatrix({'AAXJ': [-0.017325017024861104, -0.017454178112585126, -0.0078951910999460473, 0.015554367597135636, -0.0097952623403290574, 0.0043165828890857879, -0.0016117478510029263, 0.0028699551569506114, 0.011089232695403326, -0.0053068990855633961, 0.0058687711186200054, 0.0024752474809892695, 0.0037036860016985938, 0.0029872078720787872, -0.0038542570478535781, -0.0042209285223193021, 0.002296026179724942, 0.0033480000000000046, 0.012996154074396795, 0.0031206830790569398, -0.006394728544854328, -0.0099148370180958487, 0.011419571729429798, -0.022754941809970546, -0.0023106470782312495, -0.0046321395932275161, -0.0057275819890385228, 0.00018005400864183754, -0.016738660605855635, -0.0091524801546315187, 0.0020321632730064794, 0.0014748893261470792, 0.0014727908689248961, 0.013051451726049631, -0.0032662129692213994, 0.0098307118150373889, 0.0099152513085406235, 0.014102124241342317, -0.0049287448525129089, 0.00088453919838215103, 0.0097207313637069099, 0.0094520740512502293, 0.0012138720726157194, 0.00051953583236798433, -0.00086548381512895414, -0.0025987698787462454, -0.0024318221295813892, 0.00052235765279464667, 0.010616098339994821, 0.0068882555536422104, 0.0094065160012567761, -0.0018637749915284062, 0.0010185197759295002, -0.0028828556404468055, 0.003231343592369863, 0.0016951686151832875, 0.0025385344389913795, 0.0052328998908540824, -0.00016789253010727933, -0.0028552569221489224, 0.0062321543916482817, 0.0036825743661674502, 0.0043362575773226277, 0.0033211058897192015, 0.00016554121699904835, 0.0062882839649180877, -0.001808912977982017, -0.0018122075483985067, 0.0077570721241128288, 0.0042580903331462527, 0.0011415362035224349, -0.0060270240434438333, -0.0031137004260898518, -0.003452293162837647, 0.0095678325563812745, -0.013888937681553321, 0.0, 0.00049714997505054877, 0.0029811195266459122, -0.0023118064347456019, -0.0052962596920311097, 0.0076539603212632448, 0.012384411948738244, -0.0030990376268302425, 0.020615216305877232, 0.0086565724806576972, 0.00031787985752956637, 0.010327311889534717, -0.010850731247051467, 0.0047694593078073302, 0.00063292720517526147, 0.001106878522869049, 0.00031592165035664114, 0.0026843201426079168, 0.0001574488188975741, -0.0040938121270291325, -0.0049012015810276643, 0.0073085956038861774, -0.0014195740877106105, -0.00047389037318137451, -0.00094813528679090397, -0.0012654539502460218, -0.0044345581950356377, -0.0042952751464321575, 0.0043138041220642373, -0.001113585728387123, 0.0050963528412748434, -0.011884011854159215, -0.0046504328952785574, 0.011922039632672779, 0.0012736506722869857, 0.0082684211841059282, 0.011827850496767137, 0.00015576682320643002, 0.0010908524572496854, -0.00046698320258359381, 0.0032705030878445629, 0.0065196835305708451, -0.0035471161966142378, -0.0071196253347836393, 0.0018705377437089239, 0.0040454646356992991, 0.012087385899385948, 0.0035217119437059336, 0.0035092462082812578, 0.0025848412308731483, 0.0074309673208684448, -0.00090316122233945271, -0.014313770635207061, 0.0012228982336564343, 0.014045770992366298, 0.0030112165917259505, -0.0049534972251501289, 0.0028662241233031911, 0.0093260374852871617, 0.0017884203215624086, -0.0025289794327731795, -0.0043251452203514999, 0.0092869230291515413, 0.0059365096142702505, -0.0013277810759483306, 0.0022158959309824277, -0.0010318249429141432, 0.0094438103634562221, -0.0081860249562330286, -0.0070743554038130169, 0.0066794861208481207, -0.0011796225302269721, -0.0094478892662500612, 0.0011922802143750802, 0.011015153319440096, -0.01015893728383202, 0.0023798303266475639, 0.0041549043501245553, 0.0022166691951136254, 0.008699557652609961, -0.0099400812781710157, 0.0025099511659552745, -0.010898350194452129, 0.0043179419703428768, 0.0026686435582792809, -0.00059146830954323018, -0.012131958108119961, 0.0032949080408075549, 0.0067174804214803372, 0.01023124228258469, 0.01761346033818267, 0.0028847107201871447, 0.010642859350537312, -0.0059769320895232741, 0.0037223050457352563, 0.0072743116919938436, -0.0015576464928781851, 0.0, 0.0055311301792333031, -0.0012694498936686564, 0.005931436405350602, -0.0067387755128972332, -0.00070675618374563666, 0.001980183959555233, 0.005787747362379872, -0.00042103859649127948, -0.0050547598279309129, 0.0046570843260362073, 0.0043545159613844805, 0.0015384755244754811, -0.0090769723631200713, -0.025366333502907682, 0.0011566511765962193, 0.011987319814769394, -0.0012843870415298528, 0.010288567721267457, -0.012588388087201802, 0.0050136944567740517, 0.0039908492593587397, 0.012918738985839217, 0.0016818921284342148, 0.0046173498724311965, 0.0038997073579509971, -0.0040233211980211054, -0.0023679899377631536, 0.002932127774415347, 0.0033411943939523447, 0.0049951436103789883, -0.014082507248377828, 0.0049012460495030828, 0.0064102422962585238, -0.0037386319061391339, 0.013898541232739732, -0.00095956138284684488, -0.004390765822891155, 0.00055126793140217916, 0.0071626035031019924, 0.008752721194499994, 0.0010845173241725134, -0.0059587489685129268, 0.0009536648241507637, -0.0074860894584716803, -0.018239194137114393, -0.00069835176412072399, -0.00027961978921415073, -0.0011184983690644829, 0.010918238776084992, 0.0036001384159493445, 0.012831139093633927, -0.00081740902779410464, 0.0084526655338149695, -0.0055428280986504685, 0.0028547988813160449, 0.0096245903331132407, 0.0017454080929615499, -0.00067019165433336201, 0.0091201719184596398, 0.0019936337584698389, -0.0051730866848798216, 0.0038666800000000498, -0.010492774465496469, 0.0049664832214764698, -0.0054762118815462144, 0.00040288746176324368, -0.003356155278726145, -0.0021551185925408091, 0.013093965629212541, -0.0061293401946966542, 0.0096527957985142378, 0.0086310054078079148, 0.0023696682776418523, -0.0031520488987661064, 0.0083003555125071415, -0.0045733569132804614, 0.0051194539249144961], 'BBBY': [0.061953328474246838, 0.0043469001223268014, 0.044191296392196128, -0.017670178883071701, -0.0044414169318546118, 0.0020074948914791326, -0.011130899872257341, 0.0094552458106820208, 0.01984834968777862, -0.0069975945768642094, 0.002422373926448063, -0.0059314586994728274, -0.0041988729281768012, -0.0055481578884119418, 0.013389845717700315, -0.014093811935696841, 0.025686799195890026, 0.0021777439972885775, 0.036071273359408879, 0.0069210989932885119, 0.0014581129538894044, -0.012063269048948883, 0.0046316000000000725, -0.016135791782569391, 0.015974440554325016, -0.0090146958277840961, -0.0038079119949227776, -0.018899957528137674, -0.013852813552969415, -0.091747144606076719, -0.014741444786335238, 0.0053961736571008318, -0.010002439131376564, 0.0071463032456232905, -0.005627599844081327, 0.0066437255571783014, 0.030065974089464667, -0.023255790774935697, -0.013362463556851133, -0.0041862101899481302, 0.0076657024645326952, -0.0036810306748466413, 0.0071428821252650463, 0.00073365127741880515, 0.005376368786723703, -0.0012153379002267982, -0.0048673886590413096, -0.0051357056770775737, -0.01745326941986225, 0.0060044531897808263, 0.0079582195463372262, -0.0032074266767190378, -0.01633663285462205, 0.006542475765350891, 0.0087499499999999838, -0.013878488915910123, 0.0062829855168890286, 0.00074922575551375622, -0.010232093835787465, -0.010085779122541621, 0.0068772545530950005, 0.020237870484135449, -0.0019836845036605836, -0.0022360248447205818, 0.021414342629482237, 0.0063383471477326528, -0.0096898742657429947, 0.0063600291986293236, 0.0077783181278152274, -0.0077182828682653927, -0.017987287748840137, 0.015841558621705096, 0.020955189547875421, -0.035799520964223341, 0.0079207669346155682, -0.0027013751792392985, -0.0091110315412205965, -0.014910610590924125, -0.015893062964002599, 0.016149731666225672, -0.0050454088053835658, 0.0083671655265509237, -0.0062861453356801607, -0.0010121457489880123, 0.0017730243161094938, 0.0030341087998510432, 0.00025213008581447536, -0.013356804435483849, -0.028607993429987669, 0.0078885881643069155, 0.0015652751596515867, -0.002604792982672187, 0.00078346824801588675, 0.020354853862212918, 0.0069053967726545821, 0.01422405420939939, -0.011770623591284834, -0.0045615814638008409, -0.0076374492779391293, -0.030271959979476584, 0.033862514123346954, 0.010491299360731959, -0.0027855405021251708, -0.004570848030196843, -0.01887760155924496, -0.001820072850235911, 0.0010419640802804848, -0.00026026541764246854, 0.017959475167073261, 0.020966478625249731, -0.0032557225144002012, -0.0027638191649200653, -0.0083143867048219439, 0.00076214428957946346, -0.0053312771091970903, -0.010974987238386925, -0.034064516129032267, 0.02030454181138126, -0.013354255390265931, -0.015392834394904468, 0.0064690569525099181, -0.0034815479378684285, 0.0088686377013879377, 0.0031965635802724897, -0.026553372278279343, -0.015275559192580395, -0.0036010251302505867, -0.013622490585974867, 0.00056369785794822792, -0.0098590985915492785, 0.0051209100926935857, -0.00028310216342473081, -0.017553765571913928, 0.00028812679284925536, 0.0017286373301251567, 0.0023007765314925579, -0.0031562699085375939, -0.0094991934657921839, 0.027027027027027226, -0.0039614883984154803, -0.010227300845815229, -0.021813949483352555, -0.0073356803206760376, -0.00029565472683093741, 0.053814281490242331, 0.0238496920272082, -0.0082215122926001423, -0.0016578613334584569, -0.0055355935362415383, -0.016699081547453365, -0.0050948199776495824, -0.02873408086861573, -0.014059725074977285, 0.0023767676767678983, -0.12122115464012138, 0.014839797639123147, 0.020937155201063408, -0.017252539624105962, 0.0086121229343449832, -0.0016420689115905691, 0.024671052631578948, -0.011235987158908473, -0.037337631082390653, 0.0013491062394604969, -0.028629200787160716, -0.0069348474341192901, -0.0048882334109019883, 0.024912245614035083, -0.0010270113326604395, 0.0010280671692940407, -0.01609034632284655, 0.015657654836464995, 0.011990407263089777, -0.0094787065173084668, -0.037252221462747773, 0.0049697905573303511, 0.032850619316517844, 0.040355677154582881, -0.036817915844838983, 0.020477850528254248, 0.0066889632107024364, -0.0089700996677741906, 0.023801575595038617, -0.014407366915279366, 0.017940166112956749, -0.0084856399636305986, -0.019749770235344504, -0.046339857409675826, 0.013380316901408578, 0.010771333885638074, -0.052251632863526971, 0.006891548784911182, -0.010086455331412144, -0.0076419213973799435, -0.0022002566923358911, 0.005880264824706616, 0.0058458163739197573, -0.0018162367665733733, 0.016739483260553197, 0.0021474229725330965, -0.002142821428571346, -0.0025053685574313428, -0.010046680658533242, 0.0090612540775643347, 0.0061063218390805208, -0.0042842199214566945, -0.0086051993045966387, 0.023508101265822826, -0.022614806452820001, 0.048806941431670331, 0.016890727335401531, -0.021694881355932189, -0.0065835410054212659, -0.047785176142309101, -0.0098900369923089568, -0.15871257274463302, -0.021547933157431771, 0.011685393258427037, 0.024433540648600448, -0.0052037296272213797, 0.013513469332455463, 0.0094623225806450689, 0.0, 0.0055390287830861685, -0.013983050847457705, -0.00085947571981089704, 0.0, -0.014623655913978488, -0.026625971191619399, -0.0053811213175390714, -0.0085662759242561438, -0.031832605729877138, -0.0028182713565865847, -0.00047107866227049413, -0.0061262491105677237, 0.0018965860597438653, 0.003312920175718056, 0.012735754116237896, -0.019096414489819035, 0.017094065389082119, -0.021942063492063554, 0.0023865869982535887, -0.032857190476190588, -0.018709946760706291, -0.0015052684395384414, 0.021608040201005013, -0.030004968027545525, -0.0081135906751313817, 0.021472444860554583, -0.03603603603603598, 0.011941848390446357]})
#w1 = getWeightage()
#r1 = portfolioRisk(m1,w1)
#print(r1)
#c1 = portfolioCorrelation(m1,r1)
#print(c1)

#simple calculation for double checking
#stockList = getStock("AAPL")
#print(stockGlobalMap)
#print("Mean", np.mean(stockList))
#print("Std", np.std(stockList))

#value = sharpe(stockList)
#print("sharpe ratio:", value)
